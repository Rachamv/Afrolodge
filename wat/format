## Models:

1. **models/user.py:**
  from ..services.db_connection import connect_to_database

class User:
    def __init__(self, email, password, name, profile_picture=None):
        self.email = email
        self.password = password
        self.name = name
        self.profile_picture = profile_picture

    def create_user(self):
        with connect_to_database() as (conn, cursor):
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    email TEXT PRIMARY KEY,
                    password TEXT NOT NULL,
                    name TEXT NOT NULL,
                    profile_picture TEXT
                )
            """)
            cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?)", (self.email, self.password, self.name, self.profile_picture))
            conn.commit()

    @classmethod
    def authenticate_user(cls, email, password):
        with connect_to_database() as (conn, cursor):
            cursor.execute("SELECT * FROM users WHERE email=? AND password=?", (email, password))
            user_data = cursor.fetchone()
            if user_data:
                return cls(*user_data)  # Create a User instance from fetched data
            return None

    def update_user(self):
        with connect_to_database() as (conn, cursor):
            cursor.execute("UPDATE users SET name=?, profile_picture=? WHERE email=?", (self.name, self.profile_picture, self.email))
            conn.commit()

    def delete_user(self):
        with connect_to_database() as (conn, cursor):
            cursor.execute("DELETE FROM users WHERE email=?", (self.email,))
            conn.commit()


2. **models/city.py:**
   from ..services.db_connection import connect_to_database

class City:
    def __init__(self, name, state, country):
        self.name = name
        self.state = state
        self.country = country

    def create_city(self):
        with connect_to_database() as (conn, cursor):
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS cities (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    state TEXT NOT NULL,
                    country TEXT NOT NULL
                )
            ''')
            cursor.execute('''
                INSERT INTO cities (name, state, country)
                VALUES (?, ?, ?)
            ''', (self.name, self.state, self.country))
            conn.commit()

    def get_city_details(self, city_id):
        with connect_to_database() as (conn, cursor):
            cursor.execute('''
                SELECT * FROM cities
                WHERE id = ?
            ''', (city_id,))
            city_data = cursor.fetchone()
        return city_data

    def delete_city(self, city_id):
        with connect_to_database() as (conn, cursor):
            cursor.execute('''
                DELETE FROM cities
                WHERE id = ?
            ''', (city_id,))
            conn.commit()


3. **models/place.py:**
  from ..services.db_connection import connect_to_database

with connect_to_database() as (conn, cursor):
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Place (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            location TEXT NOT NULL,
            price REAL NOT NULL,
            amenities TEXT,
            photos TEXT,  # Assuming a comma-separated list of photo paths
            availability_calendar TEXT,  # Assuming a JSON string or similar format
            host_id INTEGER NOT NULL,
            reviews JSON  # Assuming a JSON array of reviews
        )
    """)

def create_place(title, description, location, price, amenities, photos, availability_calendar, host_id, reviews):
    """Adds a new place to the database."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("""
            INSERT INTO Place (title, description, location, price, amenities, photos, availability_calendar, host_id, reviews)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (title, description, location, price, amenities, photos, availability_calendar, host_id, reviews))
        conn.commit()

def get_place_details(place_id):
    """Retrieves detailed information about a place."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("SELECT * FROM Place WHERE id=?", (place_id,))
        place_data = cursor.fetchone()
    return place_data

def edit_place(place_id, **kwargs):
    """Modifies existing place information."""
    with connect_to_database() as (conn, cursor):
        update_query = "UPDATE Place SET " + ", ".join([f"{key}=?" for key in kwargs]) + " WHERE id=?"
        cursor.execute(update_query, list(kwargs.values()) + [place_id])
        conn.commit()

def delete_place(place_id):
    """Removes a place listing."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("DELETE FROM Place WHERE id=?", (place_id,))
        conn.commit()



4. **models/state.py:**
from ..services.db_connection import connect_to_database

with connect_to_database() as (conn, cursor):
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS State (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            country TEXT NOT NULL
        )
    """)

def create_state(name, country):
    """Adds a new state to the database."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("""
            INSERT INTO State (name, country)
            VALUES (?, ?)
        """, (name, country))
        conn.commit()

def get_state_details(state_id):
    """Retrieves details about a specific state."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("SELECT * FROM State WHERE id=?", (state_id,))
        state_data = cursor.fetchone()
    return state_data

def delete_state(state_id):
    """Removes a state and its associated data (if any)."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("DELETE FROM State WHERE id=?", (state_id,))
        conn.commit()



6. **models/review.py:**
 from ..services.db_connection import connect_to_database

with connect_to_database() as (conn, cursor):
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Review (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            content TEXT NOT NULL,
            rating INTEGER NOT NULL,
            author_id INTEGER NOT NULL,
            place_id INTEGER NOT NULL,
            FOREIGN KEY (author_id) REFERENCES User(id),
            FOREIGN KEY (place_id) REFERENCES Place(id)
        )
    """)

def create_review(content, rating, author_id, place_id):
    """Adds a new review to the database."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("""
            INSERT INTO Review (content, rating, author_id, place_id)
            VALUES (?, ?, ?, ?)
        """, (content, rating, author_id, place_id))
        conn.commit()

def get_place_reviews(place_id):
    """Retrieves reviews for a specific place."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("SELECT * FROM Review WHERE place_id=?", (place_id,))
        reviews = cursor.fetchall()
    return reviews

def delete_review(review_id):
    """Removes a user's review."""
    with connect_to_database() as (conn, cursor):
        cursor.execute("DELETE FROM Review WHERE id=?", (review_id,))
        conn.commit()
